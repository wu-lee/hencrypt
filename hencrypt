#!/bin/bash

# Author: Nick Stokoe
#
# https://github.com/wu-lee/hencrypt
#
# For usage, execute with no parameters, or see the `usage` function
# below.

set -o pipefail
set -o errexit

# Defaults

# See https://www.keylength.com/en/compare/
# 4096 RSA/256 AES should be good for a few decades.
# Note CYPHEROPT correlates with ONETIMEKEYSIZE.
RSAKEYSIZE=4096
ONETIMEKEYSIZE=256
OPENSSL=/usr/bin/openssl
BASE64=/usr/bin/base64
CYPHEROPT=-aes-256-cbc

# Write to stderr
function warn() {
    printf "%s\n" "$*" >&2
}

# Exit with a nonzero code, printing the arguments on stderr
function die() {
    warn "exiting: $*" >&2
    exit 1
}

# We use this to avoid the use of `cat`.  Works much the same,
# except it optionally omits lines matching a regex defined by $1
function copyout() {
    while IFS='' read -r line; do
	[[ -n "$1" && "$line" =~ $1 ]] || printf "%s\n" "$line"
    done
}

# Versioning. IFS set to split on EOL temporarily to capture lines in arrays.
IFS='
'
VERSION=0.1.0
OPENSSL_VERSION=($("$OPENSSL" version -a)) || die "Failed to get openssl version"
BASE64_VERSION=($("$BASE64" --version)) || die "Failed to get base64 version"
unset IFS

# Generates an ASCII-armoured RSA keypair to the files given by $1 and $1.pub
function genkeys() {
    local keyfile=${1?you must supply a key filename}
    warn "Writing keypair to $keyfile:"
    "$OPENSSL" genrsa "$RSAKEYSIZE"  >$keyfile
    warn "Copying public key to $keyfile.pub:"
    "$OPENSSL" rsa -pubout <$keyfile >$keyfile.pub
}

# genonetime - Generates a random key, in base64.
#
# Output is on stdout and the significant data should be on the first
# line to work correctly.  A dummy linefeed is appended so that the
# output, when sent to `read`, will not induce it to return an error
# code because of EOF (unless there was an error, when it is omitted
# and an error code returned).
function genonetime() {
    "$OPENSSL" rand  "$ONETIMEKEYSIZE" | "$BASE64" -w0 &&
    printf "\n"
}

# rsaencrypt $pubkeyfile - RSA-encrypts using $pubkeyfile
#
# RSA encrypts a base64 encoded stream to a base64 stream on stdout,
# using the public keyfile given.
#
# Output is on stdout and the significant data on the first line to
# work correctly.  A dummy linefeed is appended so that the output,
# when sent to `read`, will not induce it to return an error code
# because of EOF (unless there was an error, when it is omitted and an
# error code returned).
function rsaencrypt() {
    local pubkeyfile
    pubkeyfile=${1?you must supply a public key file} &&
    "$BASE64" -d | "$OPENSSL" rsautl -encrypt -pubin -inkey "$pubkeyfile" | "$BASE64" -w0 &&
    printf "\n"
}

# rsadecrypt $privkeyfile - RSA-decrypts using $privkeyfile
#
# RSA decrypts a base64 encoded stream to a base64 stream on stdout,
# using the private keyfile given.
#
# Output is on stdout and the significant data on the first line to
# work correctly.  A dummy linefeed is appended so that the output,
# when sent to `read`, will not induce it to return an error code
# because of EOF (unless there was an error, when it is omitted and an
# error code returned).
function rsadecrypt() {
    local privkeyfile
    privkeyfile=${1?you must supply a private key file} &&
    "$BASE64" -d | "$OPENSSL" rsautl -decrypt -inkey "$privkeyfile" | "$BASE64" -w0 &&
    printf "\n"
}

# encrypt $pubkeyfile - Hybrid-encrypts using $pubkeyfile
#
# A one-time key is generated, encrypted using the public RSA key, and
# then written out base64-encoded as the first line (with some
# versioning metadata).  Then the standard input is encrypted as the
# rest of the stream, in binary format.
#
# Exits with an error code on failure.
function encrypt() {
    local onetimekey eonetimekey versioninfo
    local n=$'\n'
    local pubkeyfile=${1?you must supply a public key file}
    [ -f "$pubkeyfile" ] || die "no such file: $pubkeyfile"

    # Generate a random one-time key for symmetric encryption.
    # Avoid exposing the value via shell-expansion - use read.
    # Note: read fails if genonetime returns no EOL
    read -r onetimekey < <(genonetime) || die "genonetime failed"

    # Encrypt it with asymmetric RSA encryption.
    # Use a herestring to avoid putting onetimekey in a file or the arglist.
    # However, we don't care so much once it is encrypted, so shell-expanding can be used to get the result.
    eonetimekey=$(rsaencrypt "$pubkeyfile" <<<"$onetimekey") || die "rsaencrypt failed"

    # 4096 bits is a very strong RSA key length. Encoded in base64
    # this takes 682 characters. 9999 characters should therefore be
    # more than adequate for any conceivable RSA strength we could
    # ever use.
    [[ ${#eonetimekey} > 9999 ]] && die "unsupported: encrypted one-time keys larger that 9999 chars of base64"
    
    versioninfo="hencrypt $VERSION$n${OPENSSL_VERSION[0]}$n${BASE64_VERSION[0]}"
    [[ ${#versioninfo} > 99 ]] && die "bug! versioninfo is too long! check output of openssl/base64"
    
    # Print the versioninfo, the encrypted key and their lengths (in
    # chars) first. We use a length to avoid permitting an arbitrarily
    # long read on decryption.
    printf "%02d%s%04d%s" "${#versioninfo}" "$versioninfo" "${#eonetimekey}" "$eonetimekey" ||
	die "error formatting versioninfo field"

    # Encrypt stdin -> stdout using our one-time key, which is read
    # from stderr (we pass the key encoded as base64 directly, as a
    # password).
    "$OPENSSL" enc $CYPHEROPT -salt -pass fd:2 2<<<"$onetimekey" ||
	die "failed to encrypt"
}

# decrypt $keyfile -  Hybrid-decrypts stdin to stdout.
#
# The first line is expected to be a
# base64 encoded, RSA encrypted symmetric cypher key.  This is read,
# decrypted using the private key file supplied, used to decrypt the rest of the
# binary stream on stdin.
#
# Exits with an error code on failure.
function decrypt() {
    local versioninfo eonetimekey length
    local privkeyfile=${1?you must supply a private key file}
    [ -f "$privkeyfile" ] || die "no such file: $privkeyfile"

    # Read the versioninfo field first, preceeded by a length field.
    read -N 2 length || die "EOF reading versioninfo length field"
    [[ "$length" =~ [0-9]{2} ]] || die "invalid versioninfo length field encountered whilst decrypting"
    read -N "$length" versioninfo || die "EOF reading versioninfo field"
    warn "versioninfo: $versioninfo"

    # Split versioninfo on whitespace into words.
    local versionwords=($versioninfo)

    # Check the first versioninfo word is 'hencrypt'    
    local version="${versionwords[1]}"
    [[ "${versionwords[0]}" == "hencrypt" ]] ||
	die "not a hencrypt file"

    # The second word is the hencrypt version used.
    # Compare the significant version components (i.e. not the last
    # component) of the file with ours.
    [[ "${version%.*}" == "${VERSION%.*}" ]] ||
	die "hencrypt version mismatch $version!=$VERSION"
    
    # Read the RSA encrypted base64 encoded one time key next,
    # also preceeded by a length field.
    read -N 4 length || die "EOF reading one-time key length field"
    [[ "$length" =~ [0-9]{4} ]] || die "invalid one-time key length field encountered whilst decrypting"
    read -N "$length" eonetimekey || die "EOF reading one-time key field"

    # Decrypt it.  Use a herestring to avoid putting onetimekey in a
    # file or the arglist. Avoid exposing the value via
    # shell-expansion - use read.  Note: read fails if genonetime
    # returns no EOL.
    local onetimekey
    read -r onetimekey < <(rsadecrypt "$privkeyfile" <<<"$eonetimekey") || die "rsadecrypt failed"

    # Decrypt the rest of the stream with it (we pass the key encoded
    # as base64 directly, as a password).
    "$OPENSSL" enc -d $CYPHEROPT -pass fd:2 2<<<"$onetimekey" || die "failed to decrypt"
}


# Just prints usage to stderr
usage() {
    # Avoiding the use of external commands like cat, basename. 
    copyout <<'USAGE' >&2;

hencrypt - Hybrid encryption of potentially large datastreams.


USAGE:

    hencrypt -h 

Prints this usage.


    hencrypt [-S] -g <keyfile>

Generates a new RSA keypair in <keyfile> and copies the public portion
to <keyfile>.pub. Use the former for decryption, and the latter for
encryption.


    hencrypt [-s] -e <keyfile.pub>

Encrypts stdin to stdout using the supplied public key file


    hencrypt -d <keyfile>

Decrypts stdin to stdout, using the supplied private key file (may
also be a keypair file).


The following options can be supplied in some cases (as indicated),
and are ignored otherwise:

 - `-s` - sets the one-time key size (in bits).  Default: 256

 - `-S` - sets the RSA key size (in bits).  Default: 4096


    hencrypt -v

Prints out version information.


USAGE
}


while getopts "hedgvs:S:" OPTION
do
    case "$OPTION" in
        h|d|e|g|v)
	    [[ -z "$operation" ]] || die "can only use one of -h -e -d -g or -v"
	    operation=$OPTION
            ;;

	s)
	    [[ "$OPTARG" -gt 0 ]] || die "one-time key size must be numeric and positive"
	    ONETIMEKEYSIZE=$OPTARG
	    ;;
	
	S)
	    [[ "$OPTARG" -gt 0 ]] || die "RSA key size must be numeric and positive"
	    RSAKEYSIZE=$OPTARG
	    ;;
	
        *)
            usage
	    exit 1
            ;;
    esac
done

# remove the options from the argument list
shift $((OPTIND-1))

if [[ "$operation" == "h" ]]; then
    usage
    exit 0
fi

if [[ "$operation" == "v" ]]; then
    copyout <<EOF

VERSIONS

hencrypt:
VERSION: $VERSION
CYPHEROPT: $CYPHEROPT
RSAKEYSIZE: $RSAKEYSIZE
ONETIMEKEYSIZE: $ONETIMEKEYSIZE

openssl:
${OPENSSL_VERSION[*]}

base64:
${BASE64_VERSION[*]}

EOF
    exit 0
fi


# Validate the remaining options
if [[ $# != 1 ]]; then
    usage
    die "you must supply a key file as the only argument"
fi

# Execute the appropriate action
case "$operation" in
    d) decrypt "$1"; exit;;
    e) encrypt "$1"; exit;;
    g) genkeys "$1"; exit;;
esac

die "you must supply one of the options d, e, g or h."
